import { z } from "zod";
import type { GatewayHelloData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayReadyDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayInvalidSessionData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayApplicationCommandPermissionsUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayAutoModerationRuleCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayAutoModerationRuleUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayAutoModerationRuleDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayAutoModerationActionExecutionDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayChannelCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayChannelUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayChannelDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayChannelPinsUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayThreadCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayThreadUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayThreadDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayThreadListSyncDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayThreadMemberUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayThreadMembersUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayEntitlementCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayEntitlementUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayEntitlementDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildAuditLogEntryCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildBanAddDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildBanRemoveDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildEmojisUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildStickersUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildIntegrationsUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildMemberAddDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildMemberRemoveDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildMembersChunkDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildRoleCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildRoleUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildRoleDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildScheduledEventCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildScheduledEventUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildScheduledEventDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildScheduledEventUserAddDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayGuildScheduledEventUserRemoveDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayIntegrationCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayIntegrationUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayIntegrationDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayInteractionCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayInviteCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayInviteDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayMessageCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayMessageUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayMessageDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayMessageDeleteBulkDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayMessageReactionAddDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayMessageReactionRemoveDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayMessageReactionRemoveAllDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayMessageReactionRemoveEmojiDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayPresenceUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayStageInstanceCreateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayStageInstanceUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayStageInstanceDeleteDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayTypingStartDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayUserUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayVoiceStateUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayVoiceServerUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";
import type { GatewayWebhooksUpdateDispatchData } from "discord-api-types/gateway/v10.d.ts";

// THIS IS A CODE GENERATED FILE - see generate.js for more info
export { GatewayHelloData }
export const GatewayHelloDataSchema = z.unknown()
export { GatewayReadyDispatchData }
export const GatewayReadyDispatchDataSchema = z.unknown()
export { GatewayInvalidSessionData }
export const GatewayInvalidSessionDataSchema = z.object({
valueOf: z.object({
}),
})
export { GatewayApplicationCommandPermissionsUpdateDispatchData }
export const GatewayApplicationCommandPermissionsUpdateDispatchDataSchema = z.unknown()
export { GatewayAutoModerationRuleCreateDispatchData }
export const GatewayAutoModerationRuleCreateDispatchDataSchema = z.object({
id: z.string(),
guild_id: z.string(),
name: z.string(),
creator_id: z.string(),
event_type: z.number(),
trigger_type: z.unknown(),
trigger_metadata: z.object({
keyword_filter: z.array(z.string()).optional(),
presets: z.array(z.unknown()).optional(),
allow_list: z.array(z.string()).optional(),
regex_patterns: z.array(z.string()).optional(),
mention_total_limit: z.number().optional(),
mention_raid_protection_enabled: z.boolean().optional(),
}),
actions: z.array(z.object({
type: z.unknown(),
metadata: z.object({
channel_id: z.string().optional(),
duration_seconds: z.number().optional(),
custom_message: z.string().optional(),
}).optional(),
})),
enabled: z.boolean(),
exempt_roles: z.array(z.string()),
exempt_channels: z.array(z.string()),
})
export { GatewayAutoModerationRuleUpdateDispatchData }
export const GatewayAutoModerationRuleUpdateDispatchDataSchema = z.object({
id: z.string(),
guild_id: z.string(),
name: z.string(),
creator_id: z.string(),
event_type: z.number(),
trigger_type: z.unknown(),
trigger_metadata: z.object({
keyword_filter: z.array(z.string()).optional(),
presets: z.array(z.unknown()).optional(),
allow_list: z.array(z.string()).optional(),
regex_patterns: z.array(z.string()).optional(),
mention_total_limit: z.number().optional(),
mention_raid_protection_enabled: z.boolean().optional(),
}),
actions: z.array(z.object({
type: z.unknown(),
metadata: z.object({
channel_id: z.string().optional(),
duration_seconds: z.number().optional(),
custom_message: z.string().optional(),
}).optional(),
})),
enabled: z.boolean(),
exempt_roles: z.array(z.string()),
exempt_channels: z.array(z.string()),
})
export { GatewayAutoModerationRuleDeleteDispatchData }
export const GatewayAutoModerationRuleDeleteDispatchDataSchema = z.object({
id: z.string(),
guild_id: z.string(),
name: z.string(),
creator_id: z.string(),
event_type: z.number(),
trigger_type: z.unknown(),
trigger_metadata: z.object({
keyword_filter: z.array(z.string()).optional(),
presets: z.array(z.unknown()).optional(),
allow_list: z.array(z.string()).optional(),
regex_patterns: z.array(z.string()).optional(),
mention_total_limit: z.number().optional(),
mention_raid_protection_enabled: z.boolean().optional(),
}),
actions: z.array(z.object({
type: z.unknown(),
metadata: z.object({
channel_id: z.string().optional(),
duration_seconds: z.number().optional(),
custom_message: z.string().optional(),
}).optional(),
})),
enabled: z.boolean(),
exempt_roles: z.array(z.string()),
exempt_channels: z.array(z.string()),
})
export { GatewayAutoModerationActionExecutionDispatchData }
export const GatewayAutoModerationActionExecutionDispatchDataSchema = z.unknown()
export { GatewayChannelCreateDispatchData }
export const GatewayChannelCreateDispatchDataSchema = z.object({
name: z.string().nullable(),
type: z.unknown(),
flags: z.number().optional(),
id: z.string(),
})
export { GatewayChannelUpdateDispatchData }
export const GatewayChannelUpdateDispatchDataSchema = z.object({
name: z.string().nullable(),
type: z.unknown(),
flags: z.number().optional(),
id: z.string(),
})
export { GatewayChannelDeleteDispatchData }
export const GatewayChannelDeleteDispatchDataSchema = z.object({
name: z.string().nullable(),
type: z.unknown(),
flags: z.number().optional(),
id: z.string(),
})
export { GatewayChannelPinsUpdateDispatchData }
export const GatewayChannelPinsUpdateDispatchDataSchema = z.unknown()
export { GatewayThreadCreateDispatchData }
export const GatewayThreadCreateDispatchDataSchema = z.unknown()
export { GatewayThreadUpdateDispatchData }
export const GatewayThreadUpdateDispatchDataSchema = z.object({
member: z.object({
id: z.string().optional(),
user_id: z.string().optional(),
join_timestamp: z.string(),
flags: z.unknown(),
member: z.object({
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
flags: z.unknown(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
}).optional(),
thread_metadata: z.object({
archived: z.boolean(),
auto_archive_duration: z.unknown(),
archive_timestamp: z.string(),
locked: z.boolean().optional(),
invitable: z.boolean().optional(),
create_timestamp: z.string().optional(),
}).optional(),
message_count: z.number().optional(),
member_count: z.number().optional(),
owner_id: z.string().optional(),
total_message_sent: z.number().optional(),
applied_tags: z.array(z.string()),
last_message_id: z.string().optional().nullable(),
last_pin_timestamp: z.string().optional().nullable(),
rate_limit_per_user: z.number().optional(),
type: z.unknown(),
flags: z.number().optional(),
id: z.string(),
name: z.string(),
guild_id: z.string().optional(),
permission_overwrites: z.array(z.object({
id: z.string(),
type: z.unknown(),
allow: z.string(),
deny: z.string(),
})).optional(),
position: z.number(),
parent_id: z.string().optional().nullable(),
nsfw: z.boolean().optional(),
})
export { GatewayThreadDeleteDispatchData }
export const GatewayThreadDeleteDispatchDataSchema = z.unknown()
export { GatewayThreadListSyncDispatchData }
export const GatewayThreadListSyncDispatchDataSchema = z.object({
guild_id: z.string(),
channel_ids: z.array(z.string()).optional(),
threads: z.array(z.unknown()),
members: z.array(z.object({
id: z.string().optional(),
user_id: z.string().optional(),
join_timestamp: z.string(),
flags: z.unknown(),
member: z.object({
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
flags: z.unknown(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
})),
})
export { GatewayThreadMemberUpdateDispatchData }
export const GatewayThreadMemberUpdateDispatchDataSchema = z.object({
id: z.string().optional(),
user_id: z.string().optional(),
join_timestamp: z.string(),
flags: z.unknown(),
member: z.object({
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
flags: z.unknown(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
guild_id: z.string(),
})
export { GatewayThreadMembersUpdateDispatchData }
export const GatewayThreadMembersUpdateDispatchDataSchema = z.object({
id: z.string(),
guild_id: z.string(),
member_count: z.number(),
added_members: z.array(z.object({
id: z.string().optional(),
user_id: z.string().optional(),
join_timestamp: z.string(),
flags: z.unknown(),
member: z.object({
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
flags: z.unknown(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
})).optional(),
removed_member_ids: z.array(z.string()).optional(),
})
export { GatewayEntitlementCreateDispatchData }
export const GatewayEntitlementCreateDispatchDataSchema = z.object({
id: z.string(),
sku_id: z.string(),
user_id: z.string().optional(),
guild_id: z.string().optional(),
application_id: z.string(),
type: z.number(),
deleted: z.boolean(),
starts_at: z.string().optional(),
ends_at: z.string().optional(),
})
export { GatewayEntitlementUpdateDispatchData }
export const GatewayEntitlementUpdateDispatchDataSchema = z.object({
id: z.string(),
sku_id: z.string(),
user_id: z.string().optional(),
guild_id: z.string().optional(),
application_id: z.string(),
type: z.number(),
deleted: z.boolean(),
starts_at: z.string().optional(),
ends_at: z.string().optional(),
})
export { GatewayEntitlementDeleteDispatchData }
export const GatewayEntitlementDeleteDispatchDataSchema = z.object({
id: z.string(),
sku_id: z.string(),
user_id: z.string().optional(),
guild_id: z.string().optional(),
application_id: z.string(),
type: z.number(),
deleted: z.boolean(),
starts_at: z.string().optional(),
ends_at: z.string().optional(),
})
export { GatewayGuildCreateDispatchData }
export const GatewayGuildCreateDispatchDataSchema = z.unknown()
export { GatewayGuildUpdateDispatchData }
export const GatewayGuildUpdateDispatchDataSchema = z.object({
icon_hash: z.string().optional().nullable(),
discovery_splash: z.string().nullable(),
owner: z.boolean().optional(),
owner_id: z.string(),
permissions: z.string().optional(),
region: z.string(),
afk_channel_id: z.string().nullable(),
afk_timeout: z.unknown(),
widget_enabled: z.boolean().optional(),
widget_channel_id: z.string().optional().nullable(),
verification_level: z.unknown(),
default_message_notifications: z.unknown(),
explicit_content_filter: z.unknown(),
roles: z.array(z.object({
id: z.string(),
name: z.string(),
color: z.number(),
hoist: z.boolean(),
icon: z.string().optional().nullable(),
unicode_emoji: z.string().optional().nullable(),
position: z.number(),
permissions: z.string(),
managed: z.boolean(),
mentionable: z.boolean(),
tags: z.object({
bot_id: z.string().optional(),
premium_subscriber: z.undefined().optional().nullable(),
integration_id: z.string().optional(),
subscription_listing_id: z.string().optional(),
available_for_purchase: z.undefined().optional().nullable(),
guild_connections: z.undefined().optional().nullable(),
}).optional(),
flags: z.number(),
})),
emojis: z.array(z.object({
roles: z.array(z.string()).optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
require_colons: z.boolean().optional(),
managed: z.boolean().optional(),
available: z.boolean().optional(),
})),
features: z.array(z.unknown()),
mfa_level: z.unknown(),
application_id: z.string().nullable(),
system_channel_id: z.string().nullable(),
system_channel_flags: z.unknown(),
rules_channel_id: z.string().nullable(),
max_presences: z.number().optional().nullable(),
max_members: z.number().optional(),
vanity_url_code: z.string().nullable(),
description: z.string().nullable(),
banner: z.string().nullable(),
premium_tier: z.unknown(),
premium_subscription_count: z.number().optional(),
preferred_locale: z.string(),
public_updates_channel_id: z.string().nullable(),
max_video_channel_users: z.number().optional(),
max_stage_video_channel_users: z.number().optional(),
approximate_member_count: z.number().optional(),
approximate_presence_count: z.number().optional(),
welcome_screen: z.object({
description: z.string().nullable(),
welcome_channels: z.array(z.object({
channel_id: z.string(),
description: z.string(),
emoji_id: z.string().nullable(),
emoji_name: z.string().nullable(),
})),
}).optional(),
nsfw_level: z.unknown(),
stickers: z.array(z.object({
id: z.string(),
pack_id: z.string().optional(),
name: z.string(),
description: z.string().nullable(),
tags: z.string(),
asset: z.unknown(),
type: z.unknown(),
format_type: z.unknown(),
available: z.boolean().optional(),
guild_id: z.string().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
sort_value: z.number().optional(),
})),
premium_progress_bar_enabled: z.boolean(),
hub_type: z.number().nullable(),
safety_alerts_channel_id: z.string().nullable(),
name: z.string(),
icon: z.string().nullable(),
splash: z.string().nullable(),
id: z.string(),
})
export { GatewayGuildDeleteDispatchData }
export const GatewayGuildDeleteDispatchDataSchema = z.object({
id: z.string(),
unavailable: z.boolean(),
})
export { GatewayGuildAuditLogEntryCreateDispatchData }
export const GatewayGuildAuditLogEntryCreateDispatchDataSchema = z.unknown()
export { GatewayGuildBanAddDispatchData }
export const GatewayGuildBanAddDispatchDataSchema = z.object({
guild_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
})
export { GatewayGuildBanRemoveDispatchData }
export const GatewayGuildBanRemoveDispatchDataSchema = z.object({
guild_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
})
export { GatewayGuildEmojisUpdateDispatchData }
export const GatewayGuildEmojisUpdateDispatchDataSchema = z.unknown()
export { GatewayGuildStickersUpdateDispatchData }
export const GatewayGuildStickersUpdateDispatchDataSchema = z.unknown()
export { GatewayGuildIntegrationsUpdateDispatchData }
export const GatewayGuildIntegrationsUpdateDispatchDataSchema = z.unknown()
export { GatewayGuildMemberAddDispatchData }
export const GatewayGuildMemberAddDispatchDataSchema = z.unknown()
export { GatewayGuildMemberRemoveDispatchData }
export const GatewayGuildMemberRemoveDispatchDataSchema = z.unknown()
export { GatewayGuildMembersChunkDispatchData }
export const GatewayGuildMembersChunkDispatchDataSchema = z.unknown()
export { GatewayGuildRoleCreateDispatchData }
export const GatewayGuildRoleCreateDispatchDataSchema = z.object({
guild_id: z.string(),
role: z.object({
id: z.string(),
name: z.string(),
color: z.number(),
hoist: z.boolean(),
icon: z.string().optional().nullable(),
unicode_emoji: z.string().optional().nullable(),
position: z.number(),
permissions: z.string(),
managed: z.boolean(),
mentionable: z.boolean(),
tags: z.object({
bot_id: z.string().optional(),
premium_subscriber: z.undefined().optional().nullable(),
integration_id: z.string().optional(),
subscription_listing_id: z.string().optional(),
available_for_purchase: z.undefined().optional().nullable(),
guild_connections: z.undefined().optional().nullable(),
}).optional(),
flags: z.number(),
}),
})
export { GatewayGuildRoleUpdateDispatchData }
export const GatewayGuildRoleUpdateDispatchDataSchema = z.object({
guild_id: z.string(),
role: z.object({
id: z.string(),
name: z.string(),
color: z.number(),
hoist: z.boolean(),
icon: z.string().optional().nullable(),
unicode_emoji: z.string().optional().nullable(),
position: z.number(),
permissions: z.string(),
managed: z.boolean(),
mentionable: z.boolean(),
tags: z.object({
bot_id: z.string().optional(),
premium_subscriber: z.undefined().optional().nullable(),
integration_id: z.string().optional(),
subscription_listing_id: z.string().optional(),
available_for_purchase: z.undefined().optional().nullable(),
guild_connections: z.undefined().optional().nullable(),
}).optional(),
flags: z.number(),
}),
})
export { GatewayGuildRoleDeleteDispatchData }
export const GatewayGuildRoleDeleteDispatchDataSchema = z.unknown()
export { GatewayGuildScheduledEventCreateDispatchData }
export const GatewayGuildScheduledEventCreateDispatchDataSchema = z.object({
channel_id: z.string(),
entity_metadata: z.null(),
id: z.string(),
guild_id: z.string(),
creator_id: z.string().optional().nullable(),
name: z.string(),
description: z.string().optional().nullable(),
scheduled_start_time: z.string(),
scheduled_end_time: z.string().nullable(),
privacy_level: z.number(),
status: z.unknown(),
entity_type: z.unknown(),
entity_id: z.string().nullable(),
creator: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
user_count: z.number().optional(),
image: z.string().optional().nullable(),
})
export { GatewayGuildScheduledEventUpdateDispatchData }
export const GatewayGuildScheduledEventUpdateDispatchDataSchema = z.object({
channel_id: z.string(),
entity_metadata: z.null(),
id: z.string(),
guild_id: z.string(),
creator_id: z.string().optional().nullable(),
name: z.string(),
description: z.string().optional().nullable(),
scheduled_start_time: z.string(),
scheduled_end_time: z.string().nullable(),
privacy_level: z.number(),
status: z.unknown(),
entity_type: z.unknown(),
entity_id: z.string().nullable(),
creator: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
user_count: z.number().optional(),
image: z.string().optional().nullable(),
})
export { GatewayGuildScheduledEventDeleteDispatchData }
export const GatewayGuildScheduledEventDeleteDispatchDataSchema = z.object({
channel_id: z.string(),
entity_metadata: z.null(),
id: z.string(),
guild_id: z.string(),
creator_id: z.string().optional().nullable(),
name: z.string(),
description: z.string().optional().nullable(),
scheduled_start_time: z.string(),
scheduled_end_time: z.string().nullable(),
privacy_level: z.number(),
status: z.unknown(),
entity_type: z.unknown(),
entity_id: z.string().nullable(),
creator: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
user_count: z.number().optional(),
image: z.string().optional().nullable(),
})
export { GatewayGuildScheduledEventUserAddDispatchData }
export const GatewayGuildScheduledEventUserAddDispatchDataSchema = z.unknown()
export { GatewayGuildScheduledEventUserRemoveDispatchData }
export const GatewayGuildScheduledEventUserRemoveDispatchDataSchema = z.unknown()
export { GatewayIntegrationCreateDispatchData }
export const GatewayIntegrationCreateDispatchDataSchema = z.object({
id: z.string(),
name: z.string(),
type: z.unknown(),
enabled: z.boolean(),
syncing: z.boolean().optional(),
role_id: z.string().optional(),
enable_emoticons: z.boolean().optional(),
expire_behavior: z.number().optional(),
expire_grace_period: z.number().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
account: z.object({
id: z.string(),
name: z.string(),
}),
synced_at: z.string().optional(),
subscriber_count: z.number().optional(),
revoked: z.boolean().optional(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
}).optional(),
scopes: z.array(z.unknown()).optional(),
guild_id: z.string(),
})
export { GatewayIntegrationUpdateDispatchData }
export const GatewayIntegrationUpdateDispatchDataSchema = z.object({
id: z.string(),
name: z.string(),
type: z.unknown(),
enabled: z.boolean(),
syncing: z.boolean().optional(),
role_id: z.string().optional(),
enable_emoticons: z.boolean().optional(),
expire_behavior: z.number().optional(),
expire_grace_period: z.number().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
account: z.object({
id: z.string(),
name: z.string(),
}),
synced_at: z.string().optional(),
subscriber_count: z.number().optional(),
revoked: z.boolean().optional(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
}).optional(),
scopes: z.array(z.unknown()).optional(),
guild_id: z.string(),
})
export { GatewayIntegrationDeleteDispatchData }
export const GatewayIntegrationDeleteDispatchDataSchema = z.unknown()
export { GatewayInteractionCreateDispatchData }
export const GatewayInteractionCreateDispatchDataSchema = z.object({
id: z.string(),
application_id: z.string(),
type: z.unknown(),
data: z.unknown().optional(),
guild_id: z.string().optional(),
channel: z.unknown(),
channel_id: z.string().optional(),
member: z.object({
permissions: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
}).optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
token: z.string(),
version: z.unknown(),
message: z.object({
id: z.string(),
channel_id: z.string(),
author: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
content: z.string(),
timestamp: z.string(),
edited_timestamp: z.string().nullable(),
tts: z.boolean(),
mention_everyone: z.boolean(),
mentions: z.array(z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
})),
mention_roles: z.array(z.string()),
mention_channels: z.array(z.object({
id: z.string(),
guild_id: z.string(),
type: z.unknown(),
name: z.string(),
})).optional(),
attachments: z.array(z.object({
id: z.string(),
filename: z.string(),
description: z.string().optional(),
content_type: z.string().optional(),
size: z.number(),
url: z.string(),
proxy_url: z.string(),
height: z.number().optional().nullable(),
width: z.number().optional().nullable(),
ephemeral: z.boolean().optional(),
duration_secs: z.number().optional(),
waveform: z.string().optional(),
flags: z.number().optional(),
})),
embeds: z.array(z.object({
title: z.string().optional(),
type: z.nativeEnum({"_rich":"rich","_image":"image","_video":"video","_gifv":"gifv","_article":"article","_link":"link","_auto_moderation_message":"auto_moderation_message"}).optional(),
description: z.string().optional(),
url: z.string().optional(),
timestamp: z.string().optional(),
color: z.number().optional(),
footer: z.object({
text: z.string(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
image: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
thumbnail: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
video: z.object({
url: z.string().optional(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
provider: z.object({
name: z.string().optional(),
url: z.string().optional(),
}).optional(),
author: z.object({
name: z.string(),
url: z.string().optional(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
fields: z.array(z.object({
name: z.string(),
value: z.string(),
inline: z.boolean().optional(),
})).optional(),
})),
reactions: z.array(z.object({
count: z.number(),
me: z.boolean(),
emoji: z.object({
id: z.string().nullable(),
name: z.string().nullable(),
animated: z.boolean().optional(),
}),
})).optional(),
nonce: z.unknown(),
pinned: z.boolean(),
webhook_id: z.string().optional(),
type: z.unknown(),
activity: z.object({
type: z.unknown(),
party_id: z.string().optional(),
}).optional(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
rpc_origins: z.array(z.string()).optional(),
bot_public: z.boolean(),
bot_require_code_grant: z.boolean(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
terms_of_service_url: z.string().optional(),
privacy_policy_url: z.string().optional(),
owner: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
summary: z.unknown(),
verify_key: z.string(),
team: z.object({
icon: z.string().nullable(),
id: z.string(),
members: z.array(z.object({
membership_state: z.unknown(),
permissions: z.unknown(),
team_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
role: z.unknown(),
})),
name: z.string(),
owner_user_id: z.string(),
}).nullable(),
guild_id: z.string().optional(),
guild: z.object({
name: z.string(),
icon: z.string().nullable(),
splash: z.string().nullable(),
banner: z.string().optional().nullable(),
description: z.string().optional().nullable(),
features: z.array(z.unknown()).optional(),
verification_level: z.number().optional(),
vanity_url_code: z.string().optional().nullable(),
}).optional(),
primary_sku_id: z.string().optional(),
slug: z.string().optional(),
cover_image: z.string().optional(),
flags: z.unknown(),
approximate_guild_count: z.number().optional(),
redirect_uris: z.array(z.string()).optional(),
interactions_endpoint_url: z.string().optional(),
role_connections_verification_url: z.string().optional(),
tags: z.unknown(),
install_params: z.object({
scopes: z.array(z.unknown()),
permissions: z.string(),
}).optional(),
custom_install_url: z.string().optional(),
}).optional(),
application_id: z.string().optional(),
message_reference: z.object({
message_id: z.string().optional(),
channel_id: z.string(),
guild_id: z.string().optional(),
}).optional(),
flags: z.number().optional(),
referenced_message: z.object({
id: z.string(),
channel_id: z.string(),
author: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
content: z.string(),
timestamp: z.string(),
edited_timestamp: z.string().nullable(),
tts: z.boolean(),
mention_everyone: z.boolean(),
mentions: z.array(z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
})),
mention_roles: z.array(z.string()),
mention_channels: z.array(z.object({
id: z.string(),
guild_id: z.string(),
type: z.unknown(),
name: z.string(),
})).optional(),
attachments: z.array(z.object({
id: z.string(),
filename: z.string(),
description: z.string().optional(),
content_type: z.string().optional(),
size: z.number(),
url: z.string(),
proxy_url: z.string(),
height: z.number().optional().nullable(),
width: z.number().optional().nullable(),
ephemeral: z.boolean().optional(),
duration_secs: z.number().optional(),
waveform: z.string().optional(),
flags: z.number().optional(),
})),
embeds: z.array(z.object({
title: z.string().optional(),
type: z.nativeEnum({"_rich":"rich","_image":"image","_video":"video","_gifv":"gifv","_article":"article","_link":"link","_auto_moderation_message":"auto_moderation_message"}).optional(),
description: z.string().optional(),
url: z.string().optional(),
timestamp: z.string().optional(),
color: z.number().optional(),
footer: z.object({
text: z.string(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
image: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
thumbnail: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
video: z.object({
url: z.string().optional(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
provider: z.object({
name: z.string().optional(),
url: z.string().optional(),
}).optional(),
author: z.object({
name: z.string(),
url: z.string().optional(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
fields: z.array(z.object({
name: z.string(),
value: z.string(),
inline: z.boolean().optional(),
})).optional(),
})),
reactions: z.array(z.object({
count: z.number(),
me: z.boolean(),
emoji: z.object({
id: z.string().nullable(),
name: z.string().nullable(),
animated: z.boolean().optional(),
}),
})).optional(),
nonce: z.unknown(),
pinned: z.boolean(),
webhook_id: z.string().optional(),
type: z.unknown(),
activity: z.unknown(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
rpc_origins: z.array(z.string()).optional(),
bot_public: z.boolean(),
bot_require_code_grant: z.boolean(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
terms_of_service_url: z.string().optional(),
privacy_policy_url: z.string().optional(),
owner: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
summary: z.unknown(),
verify_key: z.string(),
team: z.object({
icon: z.string().nullable(),
id: z.string(),
members: z.array(z.object({
membership_state: z.unknown(),
permissions: z.unknown(),
team_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
role: z.unknown(),
})),
name: z.string(),
owner_user_id: z.string(),
}).nullable(),
guild_id: z.string().optional(),
guild: z.object({
name: z.string(),
icon: z.string().nullable(),
splash: z.string().nullable(),
banner: z.string().optional().nullable(),
description: z.string().optional().nullable(),
features: z.array(z.unknown()).optional(),
verification_level: z.number().optional(),
vanity_url_code: z.string().optional().nullable(),
}).optional(),
primary_sku_id: z.string().optional(),
slug: z.string().optional(),
cover_image: z.string().optional(),
flags: z.unknown(),
approximate_guild_count: z.number().optional(),
redirect_uris: z.array(z.string()).optional(),
interactions_endpoint_url: z.string().optional(),
role_connections_verification_url: z.string().optional(),
tags: z.unknown(),
install_params: z.object({
scopes: z.array(z.unknown()),
permissions: z.string(),
}).optional(),
custom_install_url: z.string().optional(),
}).optional(),
application_id: z.string().optional(),
message_reference: z.unknown(),
flags: z.number().optional(),
referenced_message: z.unknown(),
interaction: z.unknown(),
thread: z.unknown(),
components: z.unknown(),
sticker_items: z.array(z.object({
id: z.string(),
name: z.string(),
format_type: z.unknown(),
})).optional(),
stickers: z.array(z.object({
id: z.string(),
pack_id: z.string().optional(),
name: z.string(),
description: z.string().nullable(),
tags: z.string(),
asset: z.unknown(),
type: z.unknown(),
format_type: z.unknown(),
available: z.boolean().optional(),
guild_id: z.string().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
sort_value: z.number().optional(),
})).optional(),
position: z.number().optional(),
role_subscription_data: z.unknown(),
resolved: z.object({
users: z.object({
}).optional(),
roles: z.object({
}).optional(),
members: z.object({
}).optional(),
channels: z.object({
}).optional(),
attachments: z.object({
}).optional(),
}).optional(),
}).optional().nullable(),
interaction: z.object({
id: z.string(),
type: z.unknown(),
name: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
member: z.object({
roles: z.array(z.string()),
premium_since: z.string().optional().nullable(),
pending: z.boolean().optional(),
nick: z.string().optional().nullable(),
mute: z.boolean(),
joined_at: z.string(),
deaf: z.boolean(),
communication_disabled_until: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
}).optional(),
}).optional(),
thread: z.unknown(),
components: z.array(z.object({
components: z.array(z.unknown()),
type: z.unknown(),
})).optional(),
sticker_items: z.array(z.object({
id: z.string(),
name: z.string(),
format_type: z.unknown(),
})).optional(),
stickers: z.array(z.object({
id: z.string(),
pack_id: z.string().optional(),
name: z.string(),
description: z.string().nullable(),
tags: z.string(),
asset: z.unknown(),
type: z.unknown(),
format_type: z.unknown(),
available: z.boolean().optional(),
guild_id: z.string().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
sort_value: z.number().optional(),
})).optional(),
position: z.number().optional(),
role_subscription_data: z.object({
role_subscription_listing_id: z.string(),
tier_name: z.string(),
total_months_subscribed: z.number(),
is_renewal: z.boolean(),
}).optional(),
resolved: z.object({
users: z.object({
}).optional(),
roles: z.object({
}).optional(),
members: z.object({
}).optional(),
channels: z.object({
}).optional(),
attachments: z.object({
}).optional(),
}).optional(),
}).optional(),
app_permissions: z.string().optional(),
guild_locale: z.unknown(),
entitlements: z.array(z.object({
id: z.string(),
sku_id: z.string(),
user_id: z.string().optional(),
guild_id: z.string().optional(),
application_id: z.string(),
type: z.number(),
deleted: z.boolean(),
starts_at: z.string().optional(),
ends_at: z.string().optional(),
})),
})
export { GatewayInviteCreateDispatchData }
export const GatewayInviteCreateDispatchDataSchema = z.unknown()
export { GatewayInviteDeleteDispatchData }
export const GatewayInviteDeleteDispatchDataSchema = z.unknown()
export { GatewayMessageCreateDispatchData }
export const GatewayMessageCreateDispatchDataSchema = z.object({
id: z.string(),
channel_id: z.string(),
author: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
content: z.string(),
timestamp: z.string(),
edited_timestamp: z.string().nullable(),
tts: z.boolean(),
mention_everyone: z.boolean(),
mention_roles: z.array(z.string()),
mention_channels: z.array(z.object({
id: z.string(),
guild_id: z.string(),
type: z.unknown(),
name: z.string(),
})).optional(),
attachments: z.array(z.object({
id: z.string(),
filename: z.string(),
description: z.string().optional(),
content_type: z.string().optional(),
size: z.number(),
url: z.string(),
proxy_url: z.string(),
height: z.number().optional().nullable(),
width: z.number().optional().nullable(),
ephemeral: z.boolean().optional(),
duration_secs: z.number().optional(),
waveform: z.string().optional(),
flags: z.number().optional(),
})),
embeds: z.array(z.object({
title: z.string().optional(),
type: z.nativeEnum({"_rich":"rich","_image":"image","_video":"video","_gifv":"gifv","_article":"article","_link":"link","_auto_moderation_message":"auto_moderation_message"}).optional(),
description: z.string().optional(),
url: z.string().optional(),
timestamp: z.string().optional(),
color: z.number().optional(),
footer: z.object({
text: z.string(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
image: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
thumbnail: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
video: z.object({
url: z.string().optional(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
provider: z.object({
name: z.string().optional(),
url: z.string().optional(),
}).optional(),
author: z.object({
name: z.string(),
url: z.string().optional(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
fields: z.array(z.object({
name: z.string(),
value: z.string(),
inline: z.boolean().optional(),
})).optional(),
})),
reactions: z.array(z.object({
count: z.number(),
me: z.boolean(),
emoji: z.object({
id: z.string().nullable(),
name: z.string().nullable(),
animated: z.boolean().optional(),
}),
})).optional(),
nonce: z.unknown(),
pinned: z.boolean(),
webhook_id: z.string().optional(),
type: z.unknown(),
activity: z.object({
type: z.unknown(),
party_id: z.string().optional(),
}).optional(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
rpc_origins: z.array(z.string()).optional(),
bot_public: z.boolean(),
bot_require_code_grant: z.boolean(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
terms_of_service_url: z.string().optional(),
privacy_policy_url: z.string().optional(),
owner: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
summary: z.unknown(),
verify_key: z.string(),
team: z.object({
icon: z.string().nullable(),
id: z.string(),
members: z.array(z.object({
membership_state: z.unknown(),
permissions: z.unknown(),
team_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
role: z.unknown(),
})),
name: z.string(),
owner_user_id: z.string(),
}).nullable(),
guild_id: z.string().optional(),
guild: z.object({
name: z.string(),
icon: z.string().nullable(),
splash: z.string().nullable(),
banner: z.string().optional().nullable(),
description: z.string().optional().nullable(),
features: z.array(z.unknown()).optional(),
verification_level: z.number().optional(),
vanity_url_code: z.string().optional().nullable(),
}).optional(),
primary_sku_id: z.string().optional(),
slug: z.string().optional(),
cover_image: z.string().optional(),
flags: z.unknown(),
approximate_guild_count: z.number().optional(),
redirect_uris: z.array(z.string()).optional(),
interactions_endpoint_url: z.string().optional(),
role_connections_verification_url: z.string().optional(),
tags: z.unknown(),
install_params: z.object({
scopes: z.array(z.unknown()),
permissions: z.string(),
}).optional(),
custom_install_url: z.string().optional(),
}).optional(),
application_id: z.string().optional(),
message_reference: z.object({
message_id: z.string().optional(),
channel_id: z.string(),
guild_id: z.string().optional(),
}).optional(),
flags: z.number().optional(),
referenced_message: z.object({
id: z.string(),
channel_id: z.string(),
author: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
content: z.string(),
timestamp: z.string(),
edited_timestamp: z.string().nullable(),
tts: z.boolean(),
mention_everyone: z.boolean(),
mentions: z.array(z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
})),
mention_roles: z.array(z.string()),
mention_channels: z.array(z.object({
id: z.string(),
guild_id: z.string(),
type: z.unknown(),
name: z.string(),
})).optional(),
attachments: z.array(z.object({
id: z.string(),
filename: z.string(),
description: z.string().optional(),
content_type: z.string().optional(),
size: z.number(),
url: z.string(),
proxy_url: z.string(),
height: z.number().optional().nullable(),
width: z.number().optional().nullable(),
ephemeral: z.boolean().optional(),
duration_secs: z.number().optional(),
waveform: z.string().optional(),
flags: z.number().optional(),
})),
embeds: z.array(z.object({
title: z.string().optional(),
type: z.nativeEnum({"_rich":"rich","_image":"image","_video":"video","_gifv":"gifv","_article":"article","_link":"link","_auto_moderation_message":"auto_moderation_message"}).optional(),
description: z.string().optional(),
url: z.string().optional(),
timestamp: z.string().optional(),
color: z.number().optional(),
footer: z.object({
text: z.string(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
image: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
thumbnail: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
video: z.object({
url: z.string().optional(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
provider: z.object({
name: z.string().optional(),
url: z.string().optional(),
}).optional(),
author: z.object({
name: z.string(),
url: z.string().optional(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
fields: z.array(z.object({
name: z.string(),
value: z.string(),
inline: z.boolean().optional(),
})).optional(),
})),
reactions: z.array(z.object({
count: z.number(),
me: z.boolean(),
emoji: z.object({
id: z.string().nullable(),
name: z.string().nullable(),
animated: z.boolean().optional(),
}),
})).optional(),
nonce: z.unknown(),
pinned: z.boolean(),
webhook_id: z.string().optional(),
type: z.unknown(),
activity: z.object({
type: z.unknown(),
party_id: z.string().optional(),
}).optional(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
rpc_origins: z.array(z.string()).optional(),
bot_public: z.boolean(),
bot_require_code_grant: z.boolean(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
terms_of_service_url: z.string().optional(),
privacy_policy_url: z.string().optional(),
owner: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
summary: z.unknown(),
verify_key: z.string(),
team: z.object({
icon: z.string().nullable(),
id: z.string(),
members: z.array(z.object({
membership_state: z.unknown(),
permissions: z.unknown(),
team_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
role: z.unknown(),
})),
name: z.string(),
owner_user_id: z.string(),
}).nullable(),
guild_id: z.string().optional(),
guild: z.object({
name: z.string(),
icon: z.string().nullable(),
splash: z.string().nullable(),
banner: z.string().optional().nullable(),
description: z.string().optional().nullable(),
features: z.array(z.unknown()).optional(),
verification_level: z.number().optional(),
vanity_url_code: z.string().optional().nullable(),
}).optional(),
primary_sku_id: z.string().optional(),
slug: z.string().optional(),
cover_image: z.string().optional(),
flags: z.unknown(),
approximate_guild_count: z.number().optional(),
redirect_uris: z.array(z.string()).optional(),
interactions_endpoint_url: z.string().optional(),
role_connections_verification_url: z.string().optional(),
tags: z.unknown(),
install_params: z.object({
scopes: z.array(z.unknown()),
permissions: z.string(),
}).optional(),
custom_install_url: z.string().optional(),
}).optional(),
application_id: z.string().optional(),
message_reference: z.object({
message_id: z.string().optional(),
channel_id: z.string(),
guild_id: z.string().optional(),
}).optional(),
flags: z.number().optional(),
referenced_message: z.object({
id: z.string(),
channel_id: z.string(),
author: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
content: z.string(),
timestamp: z.string(),
edited_timestamp: z.string().nullable(),
tts: z.boolean(),
mention_everyone: z.boolean(),
mentions: z.array(z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
})),
mention_roles: z.array(z.string()),
mention_channels: z.array(z.object({
id: z.string(),
guild_id: z.string(),
type: z.unknown(),
name: z.string(),
})).optional(),
attachments: z.array(z.object({
id: z.string(),
filename: z.string(),
description: z.string().optional(),
content_type: z.string().optional(),
size: z.number(),
url: z.string(),
proxy_url: z.string(),
height: z.number().optional().nullable(),
width: z.number().optional().nullable(),
ephemeral: z.boolean().optional(),
duration_secs: z.number().optional(),
waveform: z.string().optional(),
flags: z.number().optional(),
})),
embeds: z.array(z.object({
title: z.string().optional(),
type: z.nativeEnum({"_rich":"rich","_image":"image","_video":"video","_gifv":"gifv","_article":"article","_link":"link","_auto_moderation_message":"auto_moderation_message"}).optional(),
description: z.string().optional(),
url: z.string().optional(),
timestamp: z.string().optional(),
color: z.number().optional(),
footer: z.object({
text: z.string(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
image: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
thumbnail: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
video: z.object({
url: z.string().optional(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
provider: z.object({
name: z.string().optional(),
url: z.string().optional(),
}).optional(),
author: z.object({
name: z.string(),
url: z.string().optional(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
fields: z.array(z.object({
name: z.string(),
value: z.string(),
inline: z.boolean().optional(),
})).optional(),
})),
reactions: z.array(z.object({
count: z.number(),
me: z.boolean(),
emoji: z.object({
id: z.string().nullable(),
name: z.string().nullable(),
animated: z.boolean().optional(),
}),
})).optional(),
nonce: z.unknown(),
pinned: z.boolean(),
webhook_id: z.string().optional(),
type: z.unknown(),
activity: z.unknown(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
rpc_origins: z.array(z.string()).optional(),
bot_public: z.boolean(),
bot_require_code_grant: z.boolean(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
terms_of_service_url: z.string().optional(),
privacy_policy_url: z.string().optional(),
owner: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
summary: z.unknown(),
verify_key: z.string(),
team: z.object({
icon: z.string().nullable(),
id: z.string(),
members: z.array(z.object({
membership_state: z.unknown(),
permissions: z.unknown(),
team_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
role: z.unknown(),
})),
name: z.string(),
owner_user_id: z.string(),
}).nullable(),
guild_id: z.string().optional(),
guild: z.object({
name: z.string(),
icon: z.string().nullable(),
splash: z.string().nullable(),
banner: z.string().optional().nullable(),
description: z.string().optional().nullable(),
features: z.array(z.unknown()).optional(),
verification_level: z.number().optional(),
vanity_url_code: z.string().optional().nullable(),
}).optional(),
primary_sku_id: z.string().optional(),
slug: z.string().optional(),
cover_image: z.string().optional(),
flags: z.unknown(),
approximate_guild_count: z.number().optional(),
redirect_uris: z.array(z.string()).optional(),
interactions_endpoint_url: z.string().optional(),
role_connections_verification_url: z.string().optional(),
tags: z.unknown(),
install_params: z.object({
scopes: z.array(z.unknown()),
permissions: z.string(),
}).optional(),
custom_install_url: z.string().optional(),
}).optional(),
application_id: z.string().optional(),
message_reference: z.unknown(),
flags: z.number().optional(),
referenced_message: z.unknown(),
interaction: z.unknown(),
thread: z.unknown(),
components: z.unknown(),
sticker_items: z.array(z.object({
id: z.string(),
name: z.string(),
format_type: z.unknown(),
})).optional(),
stickers: z.array(z.object({
id: z.string(),
pack_id: z.string().optional(),
name: z.string(),
description: z.string().nullable(),
tags: z.string(),
asset: z.unknown(),
type: z.unknown(),
format_type: z.unknown(),
available: z.boolean().optional(),
guild_id: z.string().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
sort_value: z.number().optional(),
})).optional(),
position: z.number().optional(),
role_subscription_data: z.unknown(),
resolved: z.object({
users: z.object({
}).optional(),
roles: z.object({
}).optional(),
members: z.object({
}).optional(),
channels: z.object({
}).optional(),
attachments: z.object({
}).optional(),
}).optional(),
}).optional().nullable(),
interaction: z.object({
id: z.string(),
type: z.unknown(),
name: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
member: z.object({
roles: z.array(z.string()),
premium_since: z.string().optional().nullable(),
pending: z.boolean().optional(),
nick: z.string().optional().nullable(),
mute: z.boolean(),
joined_at: z.string(),
deaf: z.boolean(),
communication_disabled_until: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
}).optional(),
}).optional(),
thread: z.unknown(),
components: z.array(z.object({
components: z.array(z.unknown()),
type: z.unknown(),
})).optional(),
sticker_items: z.array(z.object({
id: z.string(),
name: z.string(),
format_type: z.unknown(),
})).optional(),
stickers: z.array(z.object({
id: z.string(),
pack_id: z.string().optional(),
name: z.string(),
description: z.string().nullable(),
tags: z.string(),
asset: z.unknown(),
type: z.unknown(),
format_type: z.unknown(),
available: z.boolean().optional(),
guild_id: z.string().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
sort_value: z.number().optional(),
})).optional(),
position: z.number().optional(),
role_subscription_data: z.object({
role_subscription_listing_id: z.string(),
tier_name: z.string(),
total_months_subscribed: z.number(),
is_renewal: z.boolean(),
}).optional(),
resolved: z.object({
users: z.object({
}).optional(),
roles: z.object({
}).optional(),
members: z.object({
}).optional(),
channels: z.object({
}).optional(),
attachments: z.object({
}).optional(),
}).optional(),
}).optional().nullable(),
interaction: z.object({
id: z.string(),
type: z.unknown(),
name: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
member: z.object({
roles: z.array(z.string()),
premium_since: z.string().optional().nullable(),
pending: z.boolean().optional(),
nick: z.string().optional().nullable(),
mute: z.boolean(),
joined_at: z.string(),
deaf: z.boolean(),
communication_disabled_until: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
}).optional(),
}).optional(),
thread: z.unknown(),
components: z.array(z.object({
components: z.array(z.unknown()),
type: z.unknown(),
})).optional(),
sticker_items: z.array(z.object({
id: z.string(),
name: z.string(),
format_type: z.unknown(),
})).optional(),
stickers: z.array(z.object({
id: z.string(),
pack_id: z.string().optional(),
name: z.string(),
description: z.string().nullable(),
tags: z.string(),
asset: z.unknown(),
type: z.unknown(),
format_type: z.unknown(),
available: z.boolean().optional(),
guild_id: z.string().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
sort_value: z.number().optional(),
})).optional(),
position: z.number().optional(),
role_subscription_data: z.object({
role_subscription_listing_id: z.string(),
tier_name: z.string(),
total_months_subscribed: z.number(),
is_renewal: z.boolean(),
}).optional(),
resolved: z.object({
users: z.object({
}).optional(),
roles: z.object({
}).optional(),
members: z.object({
}).optional(),
channels: z.object({
}).optional(),
attachments: z.object({
}).optional(),
}).optional(),
guild_id: z.string().optional(),
member: z.object({
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
flags: z.unknown(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
mentions: z.array(z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
member: z.object({
flags: z.unknown(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
})),
})
export { GatewayMessageUpdateDispatchData }
export const GatewayMessageUpdateDispatchDataSchema = z.object({
id: z.string(),
channel_id: z.string(),
author: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
content: z.string(),
timestamp: z.string(),
edited_timestamp: z.string().nullable(),
tts: z.boolean(),
mention_everyone: z.boolean(),
mention_roles: z.array(z.string()),
mention_channels: z.array(z.object({
id: z.string(),
guild_id: z.string(),
type: z.unknown(),
name: z.string(),
})).optional(),
attachments: z.array(z.object({
id: z.string(),
filename: z.string(),
description: z.string().optional(),
content_type: z.string().optional(),
size: z.number(),
url: z.string(),
proxy_url: z.string(),
height: z.number().optional().nullable(),
width: z.number().optional().nullable(),
ephemeral: z.boolean().optional(),
duration_secs: z.number().optional(),
waveform: z.string().optional(),
flags: z.number().optional(),
})),
embeds: z.array(z.object({
title: z.string().optional(),
type: z.nativeEnum({"_rich":"rich","_image":"image","_video":"video","_gifv":"gifv","_article":"article","_link":"link","_auto_moderation_message":"auto_moderation_message"}).optional(),
description: z.string().optional(),
url: z.string().optional(),
timestamp: z.string().optional(),
color: z.number().optional(),
footer: z.object({
text: z.string(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
image: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
thumbnail: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
video: z.object({
url: z.string().optional(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
provider: z.object({
name: z.string().optional(),
url: z.string().optional(),
}).optional(),
author: z.object({
name: z.string(),
url: z.string().optional(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
fields: z.array(z.object({
name: z.string(),
value: z.string(),
inline: z.boolean().optional(),
})).optional(),
})),
reactions: z.array(z.object({
count: z.number(),
me: z.boolean(),
emoji: z.object({
id: z.string().nullable(),
name: z.string().nullable(),
animated: z.boolean().optional(),
}),
})).optional(),
nonce: z.unknown(),
pinned: z.boolean(),
webhook_id: z.string().optional(),
type: z.unknown(),
activity: z.object({
type: z.unknown(),
party_id: z.string().optional(),
}).optional(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
rpc_origins: z.array(z.string()).optional(),
bot_public: z.boolean(),
bot_require_code_grant: z.boolean(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
terms_of_service_url: z.string().optional(),
privacy_policy_url: z.string().optional(),
owner: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
summary: z.unknown(),
verify_key: z.string(),
team: z.object({
icon: z.string().nullable(),
id: z.string(),
members: z.array(z.object({
membership_state: z.unknown(),
permissions: z.unknown(),
team_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
role: z.unknown(),
})),
name: z.string(),
owner_user_id: z.string(),
}).nullable(),
guild_id: z.string().optional(),
guild: z.object({
name: z.string(),
icon: z.string().nullable(),
splash: z.string().nullable(),
banner: z.string().optional().nullable(),
description: z.string().optional().nullable(),
features: z.array(z.unknown()).optional(),
verification_level: z.number().optional(),
vanity_url_code: z.string().optional().nullable(),
}).optional(),
primary_sku_id: z.string().optional(),
slug: z.string().optional(),
cover_image: z.string().optional(),
flags: z.unknown(),
approximate_guild_count: z.number().optional(),
redirect_uris: z.array(z.string()).optional(),
interactions_endpoint_url: z.string().optional(),
role_connections_verification_url: z.string().optional(),
tags: z.unknown(),
install_params: z.object({
scopes: z.array(z.unknown()),
permissions: z.string(),
}).optional(),
custom_install_url: z.string().optional(),
}).optional(),
application_id: z.string().optional(),
message_reference: z.object({
message_id: z.string().optional(),
channel_id: z.string(),
guild_id: z.string().optional(),
}).optional(),
flags: z.number().optional(),
referenced_message: z.object({
id: z.string(),
channel_id: z.string(),
author: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
content: z.string(),
timestamp: z.string(),
edited_timestamp: z.string().nullable(),
tts: z.boolean(),
mention_everyone: z.boolean(),
mentions: z.array(z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
})),
mention_roles: z.array(z.string()),
mention_channels: z.array(z.object({
id: z.string(),
guild_id: z.string(),
type: z.unknown(),
name: z.string(),
})).optional(),
attachments: z.array(z.object({
id: z.string(),
filename: z.string(),
description: z.string().optional(),
content_type: z.string().optional(),
size: z.number(),
url: z.string(),
proxy_url: z.string(),
height: z.number().optional().nullable(),
width: z.number().optional().nullable(),
ephemeral: z.boolean().optional(),
duration_secs: z.number().optional(),
waveform: z.string().optional(),
flags: z.number().optional(),
})),
embeds: z.array(z.object({
title: z.string().optional(),
type: z.nativeEnum({"_rich":"rich","_image":"image","_video":"video","_gifv":"gifv","_article":"article","_link":"link","_auto_moderation_message":"auto_moderation_message"}).optional(),
description: z.string().optional(),
url: z.string().optional(),
timestamp: z.string().optional(),
color: z.number().optional(),
footer: z.object({
text: z.string(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
image: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
thumbnail: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
video: z.object({
url: z.string().optional(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
provider: z.object({
name: z.string().optional(),
url: z.string().optional(),
}).optional(),
author: z.object({
name: z.string(),
url: z.string().optional(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
fields: z.array(z.object({
name: z.string(),
value: z.string(),
inline: z.boolean().optional(),
})).optional(),
})),
reactions: z.array(z.object({
count: z.number(),
me: z.boolean(),
emoji: z.object({
id: z.string().nullable(),
name: z.string().nullable(),
animated: z.boolean().optional(),
}),
})).optional(),
nonce: z.unknown(),
pinned: z.boolean(),
webhook_id: z.string().optional(),
type: z.unknown(),
activity: z.object({
type: z.unknown(),
party_id: z.string().optional(),
}).optional(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
rpc_origins: z.array(z.string()).optional(),
bot_public: z.boolean(),
bot_require_code_grant: z.boolean(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
terms_of_service_url: z.string().optional(),
privacy_policy_url: z.string().optional(),
owner: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
summary: z.unknown(),
verify_key: z.string(),
team: z.object({
icon: z.string().nullable(),
id: z.string(),
members: z.array(z.object({
membership_state: z.unknown(),
permissions: z.unknown(),
team_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
role: z.unknown(),
})),
name: z.string(),
owner_user_id: z.string(),
}).nullable(),
guild_id: z.string().optional(),
guild: z.object({
name: z.string(),
icon: z.string().nullable(),
splash: z.string().nullable(),
banner: z.string().optional().nullable(),
description: z.string().optional().nullable(),
features: z.array(z.unknown()).optional(),
verification_level: z.number().optional(),
vanity_url_code: z.string().optional().nullable(),
}).optional(),
primary_sku_id: z.string().optional(),
slug: z.string().optional(),
cover_image: z.string().optional(),
flags: z.unknown(),
approximate_guild_count: z.number().optional(),
redirect_uris: z.array(z.string()).optional(),
interactions_endpoint_url: z.string().optional(),
role_connections_verification_url: z.string().optional(),
tags: z.unknown(),
install_params: z.object({
scopes: z.array(z.unknown()),
permissions: z.string(),
}).optional(),
custom_install_url: z.string().optional(),
}).optional(),
application_id: z.string().optional(),
message_reference: z.object({
message_id: z.string().optional(),
channel_id: z.string(),
guild_id: z.string().optional(),
}).optional(),
flags: z.number().optional(),
referenced_message: z.object({
id: z.string(),
channel_id: z.string(),
author: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
content: z.string(),
timestamp: z.string(),
edited_timestamp: z.string().nullable(),
tts: z.boolean(),
mention_everyone: z.boolean(),
mentions: z.array(z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
})),
mention_roles: z.array(z.string()),
mention_channels: z.array(z.object({
id: z.string(),
guild_id: z.string(),
type: z.unknown(),
name: z.string(),
})).optional(),
attachments: z.array(z.object({
id: z.string(),
filename: z.string(),
description: z.string().optional(),
content_type: z.string().optional(),
size: z.number(),
url: z.string(),
proxy_url: z.string(),
height: z.number().optional().nullable(),
width: z.number().optional().nullable(),
ephemeral: z.boolean().optional(),
duration_secs: z.number().optional(),
waveform: z.string().optional(),
flags: z.number().optional(),
})),
embeds: z.array(z.object({
title: z.string().optional(),
type: z.nativeEnum({"_rich":"rich","_image":"image","_video":"video","_gifv":"gifv","_article":"article","_link":"link","_auto_moderation_message":"auto_moderation_message"}).optional(),
description: z.string().optional(),
url: z.string().optional(),
timestamp: z.string().optional(),
color: z.number().optional(),
footer: z.object({
text: z.string(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
image: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
thumbnail: z.object({
url: z.string(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
video: z.object({
url: z.string().optional(),
proxy_url: z.string().optional(),
height: z.number().optional(),
width: z.number().optional(),
}).optional(),
provider: z.object({
name: z.string().optional(),
url: z.string().optional(),
}).optional(),
author: z.object({
name: z.string(),
url: z.string().optional(),
icon_url: z.string().optional(),
proxy_icon_url: z.string().optional(),
}).optional(),
fields: z.array(z.object({
name: z.string(),
value: z.string(),
inline: z.boolean().optional(),
})).optional(),
})),
reactions: z.array(z.object({
count: z.number(),
me: z.boolean(),
emoji: z.object({
id: z.string().nullable(),
name: z.string().nullable(),
animated: z.boolean().optional(),
}),
})).optional(),
nonce: z.unknown(),
pinned: z.boolean(),
webhook_id: z.string().optional(),
type: z.unknown(),
activity: z.unknown(),
application: z.object({
id: z.string(),
name: z.string(),
icon: z.string().nullable(),
description: z.string(),
rpc_origins: z.array(z.string()).optional(),
bot_public: z.boolean(),
bot_require_code_grant: z.boolean(),
bot: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
terms_of_service_url: z.string().optional(),
privacy_policy_url: z.string().optional(),
owner: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
summary: z.unknown(),
verify_key: z.string(),
team: z.object({
icon: z.string().nullable(),
id: z.string(),
members: z.array(z.object({
membership_state: z.unknown(),
permissions: z.unknown(),
team_id: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
role: z.unknown(),
})),
name: z.string(),
owner_user_id: z.string(),
}).nullable(),
guild_id: z.string().optional(),
guild: z.object({
name: z.string(),
icon: z.string().nullable(),
splash: z.string().nullable(),
banner: z.string().optional().nullable(),
description: z.string().optional().nullable(),
features: z.array(z.unknown()).optional(),
verification_level: z.number().optional(),
vanity_url_code: z.string().optional().nullable(),
}).optional(),
primary_sku_id: z.string().optional(),
slug: z.string().optional(),
cover_image: z.string().optional(),
flags: z.unknown(),
approximate_guild_count: z.number().optional(),
redirect_uris: z.array(z.string()).optional(),
interactions_endpoint_url: z.string().optional(),
role_connections_verification_url: z.string().optional(),
tags: z.unknown(),
install_params: z.object({
scopes: z.array(z.unknown()),
permissions: z.string(),
}).optional(),
custom_install_url: z.string().optional(),
}).optional(),
application_id: z.string().optional(),
message_reference: z.unknown(),
flags: z.number().optional(),
referenced_message: z.unknown(),
interaction: z.unknown(),
thread: z.unknown(),
components: z.unknown(),
sticker_items: z.array(z.object({
id: z.string(),
name: z.string(),
format_type: z.unknown(),
})).optional(),
stickers: z.array(z.object({
id: z.string(),
pack_id: z.string().optional(),
name: z.string(),
description: z.string().nullable(),
tags: z.string(),
asset: z.unknown(),
type: z.unknown(),
format_type: z.unknown(),
available: z.boolean().optional(),
guild_id: z.string().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
sort_value: z.number().optional(),
})).optional(),
position: z.number().optional(),
role_subscription_data: z.unknown(),
resolved: z.object({
users: z.object({
}).optional(),
roles: z.object({
}).optional(),
members: z.object({
}).optional(),
channels: z.object({
}).optional(),
attachments: z.object({
}).optional(),
}).optional(),
}).optional().nullable(),
interaction: z.object({
id: z.string(),
type: z.unknown(),
name: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
member: z.object({
roles: z.array(z.string()),
premium_since: z.string().optional().nullable(),
pending: z.boolean().optional(),
nick: z.string().optional().nullable(),
mute: z.boolean(),
joined_at: z.string(),
deaf: z.boolean(),
communication_disabled_until: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
}).optional(),
}).optional(),
thread: z.unknown(),
components: z.array(z.object({
components: z.array(z.unknown()),
type: z.unknown(),
})).optional(),
sticker_items: z.array(z.object({
id: z.string(),
name: z.string(),
format_type: z.unknown(),
})).optional(),
stickers: z.array(z.object({
id: z.string(),
pack_id: z.string().optional(),
name: z.string(),
description: z.string().nullable(),
tags: z.string(),
asset: z.unknown(),
type: z.unknown(),
format_type: z.unknown(),
available: z.boolean().optional(),
guild_id: z.string().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
sort_value: z.number().optional(),
})).optional(),
position: z.number().optional(),
role_subscription_data: z.object({
role_subscription_listing_id: z.string(),
tier_name: z.string(),
total_months_subscribed: z.number(),
is_renewal: z.boolean(),
}).optional(),
resolved: z.object({
users: z.object({
}).optional(),
roles: z.object({
}).optional(),
members: z.object({
}).optional(),
channels: z.object({
}).optional(),
attachments: z.object({
}).optional(),
}).optional(),
}).optional().nullable(),
interaction: z.object({
id: z.string(),
type: z.unknown(),
name: z.string(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
member: z.object({
roles: z.array(z.string()),
premium_since: z.string().optional().nullable(),
pending: z.boolean().optional(),
nick: z.string().optional().nullable(),
mute: z.boolean(),
joined_at: z.string(),
deaf: z.boolean(),
communication_disabled_until: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
}).optional(),
}).optional(),
thread: z.unknown(),
components: z.array(z.object({
components: z.array(z.unknown()),
type: z.unknown(),
})).optional(),
sticker_items: z.array(z.object({
id: z.string(),
name: z.string(),
format_type: z.unknown(),
})).optional(),
stickers: z.array(z.object({
id: z.string(),
pack_id: z.string().optional(),
name: z.string(),
description: z.string().nullable(),
tags: z.string(),
asset: z.unknown(),
type: z.unknown(),
format_type: z.unknown(),
available: z.boolean().optional(),
guild_id: z.string().optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
sort_value: z.number().optional(),
})).optional(),
position: z.number().optional(),
role_subscription_data: z.object({
role_subscription_listing_id: z.string(),
tier_name: z.string(),
total_months_subscribed: z.number(),
is_renewal: z.boolean(),
}).optional(),
resolved: z.object({
users: z.object({
}).optional(),
roles: z.object({
}).optional(),
members: z.object({
}).optional(),
channels: z.object({
}).optional(),
attachments: z.object({
}).optional(),
}).optional(),
guild_id: z.string().optional(),
member: z.object({
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
flags: z.unknown(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
mentions: z.array(z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
member: z.object({
flags: z.unknown(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
})),
})
export { GatewayMessageDeleteDispatchData }
export const GatewayMessageDeleteDispatchDataSchema = z.unknown()
export { GatewayMessageDeleteBulkDispatchData }
export const GatewayMessageDeleteBulkDispatchDataSchema = z.unknown()
export { GatewayMessageReactionAddDispatchData }
export const GatewayMessageReactionAddDispatchDataSchema = z.object({
user_id: z.string(),
channel_id: z.string(),
message_id: z.string(),
guild_id: z.string().optional(),
member: z.object({
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
flags: z.unknown(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
emoji: z.object({
roles: z.array(z.string()).optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
require_colons: z.boolean().optional(),
managed: z.boolean().optional(),
available: z.boolean().optional(),
}),
message_author_id: z.string().optional(),
})
export { GatewayMessageReactionRemoveDispatchData }
export const GatewayMessageReactionRemoveDispatchDataSchema = z.object({
user_id: z.string(),
channel_id: z.string(),
message_id: z.string(),
guild_id: z.string().optional(),
emoji: z.object({
roles: z.array(z.string()).optional(),
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
require_colons: z.boolean().optional(),
managed: z.boolean().optional(),
available: z.boolean().optional(),
}),
})
export { GatewayMessageReactionRemoveAllDispatchData }
export const GatewayMessageReactionRemoveAllDispatchDataSchema = z.object({
channel_id: z.string(),
message_id: z.string(),
guild_id: z.string().optional(),
})
export { GatewayMessageReactionRemoveEmojiDispatchData }
export const GatewayMessageReactionRemoveEmojiDispatchDataSchema = z.unknown()
export { GatewayPresenceUpdateDispatchData }
export const GatewayPresenceUpdateDispatchDataSchema = z.object({
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}),
guild_id: z.string(),
status: z.nativeEnum({"_online":"online","_dnd":"dnd","_idle":"idle","_offline":"offline"}).optional(),
activities: z.array(z.object({
id: z.string(),
name: z.string(),
type: z.unknown(),
url: z.string().optional().nullable(),
created_at: z.number(),
timestamps: z.object({
start: z.number().optional(),
end: z.number().optional(),
}).optional(),
sync_id: z.string().optional(),
platform: z.string().optional(),
application_id: z.string().optional(),
details: z.string().optional().nullable(),
state: z.string().optional().nullable(),
emoji: z.object({
id: z.string().nullable(),
animated: z.boolean().optional(),
name: z.string().nullable(),
}).optional(),
session_id: z.string().optional(),
party: z.object({
id: z.string().optional(),
size: z.unknown(),
}).optional(),
assets: z.unknown().optional(),
secrets: z.unknown().optional(),
instance: z.boolean().optional(),
flags: z.number().optional(),
buttons: z.unknown(),
})).optional(),
client_status: z.object({
desktop: z.nativeEnum({"_online":"online","_dnd":"dnd","_idle":"idle","_offline":"offline"}).optional(),
mobile: z.nativeEnum({"_online":"online","_dnd":"dnd","_idle":"idle","_offline":"offline"}).optional(),
web: z.nativeEnum({"_online":"online","_dnd":"dnd","_idle":"idle","_offline":"offline"}).optional(),
}).optional(),
})
export { GatewayStageInstanceCreateDispatchData }
export const GatewayStageInstanceCreateDispatchDataSchema = z.object({
id: z.string(),
guild_id: z.string(),
channel_id: z.string(),
topic: z.string(),
privacy_level: z.unknown(),
discoverable_disabled: z.boolean(),
guild_scheduled_event_id: z.string().optional(),
})
export { GatewayStageInstanceUpdateDispatchData }
export const GatewayStageInstanceUpdateDispatchDataSchema = z.object({
id: z.string(),
guild_id: z.string(),
channel_id: z.string(),
topic: z.string(),
privacy_level: z.unknown(),
discoverable_disabled: z.boolean(),
guild_scheduled_event_id: z.string().optional(),
})
export { GatewayStageInstanceDeleteDispatchData }
export const GatewayStageInstanceDeleteDispatchDataSchema = z.object({
id: z.string(),
guild_id: z.string(),
channel_id: z.string(),
topic: z.string(),
privacy_level: z.unknown(),
discoverable_disabled: z.boolean(),
guild_scheduled_event_id: z.string().optional(),
})
export { GatewayTypingStartDispatchData }
export const GatewayTypingStartDispatchDataSchema = z.unknown()
export { GatewayUserUpdateDispatchData }
export const GatewayUserUpdateDispatchDataSchema = z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
})
export { GatewayVoiceStateUpdateDispatchData }
export const GatewayVoiceStateUpdateDispatchDataSchema = z.object({
guild_id: z.string().optional(),
channel_id: z.string().nullable(),
user_id: z.string(),
member: z.object({
user: z.object({
id: z.string(),
username: z.string(),
discriminator: z.string(),
global_name: z.string().nullable(),
avatar: z.string().nullable(),
bot: z.boolean().optional(),
system: z.boolean().optional(),
mfa_enabled: z.boolean().optional(),
banner: z.string().optional().nullable(),
accent_color: z.number().optional().nullable(),
locale: z.string().optional(),
verified: z.boolean().optional(),
email: z.string().optional().nullable(),
flags: z.number().optional(),
premium_type: z.number().optional(),
public_flags: z.number().optional(),
avatar_decoration: z.string().optional().nullable(),
}).optional(),
nick: z.string().optional().nullable(),
avatar: z.string().optional().nullable(),
roles: z.array(z.string()),
joined_at: z.string(),
premium_since: z.string().optional().nullable(),
deaf: z.boolean(),
mute: z.boolean(),
flags: z.unknown(),
pending: z.boolean().optional(),
communication_disabled_until: z.string().optional().nullable(),
}).optional(),
session_id: z.string(),
deaf: z.boolean(),
mute: z.boolean(),
self_deaf: z.boolean(),
self_mute: z.boolean(),
self_stream: z.boolean().optional(),
self_video: z.boolean(),
suppress: z.boolean(),
request_to_speak_timestamp: z.string().nullable(),
})
export { GatewayVoiceServerUpdateDispatchData }
export const GatewayVoiceServerUpdateDispatchDataSchema = z.unknown()
export { GatewayWebhooksUpdateDispatchData }
export const GatewayWebhooksUpdateDispatchDataSchema = z.unknown()
